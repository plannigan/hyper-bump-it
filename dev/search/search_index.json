{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hyper Bump It - 0.5.3","text":"<p>A command line tool for updating the version in project files needed for the next release.</p> <p><code>hyper-bump-it</code>'s features include:</p> <ul> <li>Updating the version to a new fully specified value</li> <li>Increasing the version based on a specific version part</li> <li>Optional Git integrations:<ul> <li>Commit changes</li> <li>Create a new branch or tag</li> <li>Push changes to a remote repository</li> </ul> </li> <li>Customizable search and replacement patterns<ul> <li>Match based on the current version or arbitrary dates</li> </ul> </li> <li>Safe by default, but can be overridden:<ul> <li>Request confirmation before editing files</li> <li>Explicit configuration need to push changes</li> <li>Won't run if the current branch is not the default</li> <li>Won't run if there are unstaged changes</li> </ul> </li> <li>TOML configuration file (can be part of <code>pyproject.toml</code>)</li> </ul>"},{"location":"#examples","title":"Examples","text":"<p>This first example</p> <ul> <li>Updates to an explicit new version</li> <li>Updates multiple files that had lines matching the search pattern</li> <li>Commits those changes to a newly created branch</li> </ul> <pre><code>hyper-bump-it to 2.3.4\nExecution Plan:\nCreate branch bump_version_to_2.3.4\nSwitch to branch bump_version_to_2.3.4\nUpdate version in configuration file\nUpdate files\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 example/foo.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n--- example/foo.txt\n+++ example/foo.txt\n@@ -1,3 +1,3 @@\n hello\n---1.2.3--abc\n+--2.3.4--abc\n world\n\n Lorem ipsum dolor sit amet, consectetur adipisci elit, sed eiusmod.\n---1.2.3--edf\n+--2.3.4--edf\n Ut enim ad minim veniam, quis nostrum exercitationem ullam corporis.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 example/bar.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n--- example/bar.txt\n+++ example/bar.txt\n@@ -1,3 +1,3 @@\n hello\n-more --1.2.3-- text\n+more --2.3.4-- text\n world\n\nCommit changes: Bump version: 1.2.3 \u2192 2.3.4\nSwitch to branch main\n\nDo you want to perform these actions? [y/n] (n): y\nCreating branch bump_version_to_2.3.4\nSwitching to branch bump_version_to_2.3.4\nUpdating version in configuration file\nUpdating files\nUpdating example/foo.txt\nUpdating example/bar.txt\nCommitting changes: Bump version: 1.2.3 \u2192 2.3.4\nSwitching to branch main\n</code></pre> <p>This second example</p> <ul> <li>Updates to the next minor version</li> <li>Updates multiple files that had lines matching the search pattern</li> <li>Commits those changes, tags the new commit, and pushes the changes to the remote repository</li> </ul> <pre><code>$ hyper-bump-it by minor\nExecution Plan:\nUpdate version in configuration file\nUpdate files\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 example/foo.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n--- example/foo.txt\n+++ example/foo.txt\n@@ -1,7 +1,7 @@\n hello\n---1.2.3--abc\n+--1.3.0--abc\n world\n\n Lorem ipsum dolor sit amet, consectetur adipisci elit, sed eiusmod.\n---1.2.3--edf\n+--1.3.0--edf\n Ut enim ad minim veniam, quis nostrum exercitationem ullam corporis.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 example/bar.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n--- example/bar.txt\n+++ example/bar.txt\n@@ -1,3 +1,3 @@\n hello\n-more --1.2.3-- text\n+more --1.3.0-- text\n world\n\nCommit changes: Bump version: 1.2.3 \u2192 1.3.0\nTag commit: v1.3.0\nPush commit to origin with tag v1.3.0\n\nDo you want to perform these actions? [y/n] (n): y\nUpdating version in configuration file\nUpdating files\nUpdating example/foo.txt\nUpdating example/bar.txt\nCommitting changes: Bump version: 1.2.3 \u2192 1.3.0\nTagging commit: v1.3.0\nPushing commit to origin with tag v1.3.0\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Support for Python <code>3.13</code> &amp; <code>3.14</code> </li> </ul>"},{"location":"changelog/#internal","title":"Internal","text":"<ul> <li>Address type issue related to GitPython library</li> <li>Use license expression metadata (PEP 639)</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Support for Python <code>3.9</code></li> </ul>"},{"location":"changelog/#053-2024-04-12","title":"[0.5.3] - 2024-04-12","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Python version <code>3.12</code> tested during CI</li> <li>Python version <code>3.12</code> added to package classifiers</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Explicit coerce configuration file lists to sets.</li> </ul>"},{"location":"changelog/#internal_1","title":"Internal","text":"<ul> <li>Use hatch for build backend.</li> </ul>"},{"location":"changelog/#052-2023-09-09","title":"[0.5.2] - 2023-09-09","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Minimum version of <code>GitPython</code> raised to <code>3.1.35</code> to address a security issue.</li> </ul>"},{"location":"changelog/#051-2023-09-03","title":"[0.5.1] - 2023-09-03","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Documentation link to package metadata.</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Reject file globs that attempt to access files outside of the project root.</li> <li>Warning before replacing an existing configuration with project initialization.</li> <li>Interactive project initialization more clearly describes explict replace format pattern.</li> <li>Interactive project initialization now shows recently provided search pattern when addressing     issues with a file definition that omitted the replace format pattern.</li> <li>Update development status classifier.</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Minimum version of <code>GitPython</code> raised to <code>3.1.34</code> to address a security issue.</li> </ul>"},{"location":"changelog/#050-2023-08-04","title":"[0.5.0] - 2023-08-04","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Support for signing commits and tags.</li> <li>Support for including a message on a tag.</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Incorrectly adding untracked files when creating a commit.</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>BREAKING: <code>tag_format_pattern</code> renamed to <code>tag_name_format_pattern</code>.</li> </ul>"},{"location":"changelog/#041-2023-05-07","title":"[0.4.1] - 2023-05-07","text":""},{"location":"changelog/#internal_2","title":"Internal","text":"<ul> <li>Update <code>typer</code> to use custom types and <code>Annotated</code> declaration style.</li> <li>Update to <code>pydantic</code> 2.0.</li> <li>Use OpenID Connect as a trusted publisher for uploading releases.</li> </ul>"},{"location":"changelog/#040-2023-02-27","title":"[0.4.0] - 2023-02-27","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li><code>--patch</code> as command line options to display the planned changes as a patch instead of performing     any operations.</li> <li>Multi-line search and replacement patterns.</li> <li>Match arbitrary dates when <code>today</code> key is used in a search format pattern.</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Display planned changes as a unified diff instead of a custom format.</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Configuration file line endings changed to system default when updating file.</li> </ul>"},{"location":"changelog/#031-2023-02-11","title":"[0.3.1] - 2023-02-11","text":""},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Incorrectly display of planned change for lines that contained leading whitespace characters.</li> <li>Incorrectly display of text containing square brackets (<code>[</code>, <code>]</code>).</li> <li>Inconsistent display of file and directory paths (absolute vs relative path).</li> <li>Crash when format pattern contained an integer key name or no key name.</li> <li>Inconsistent colors of displayed text.</li> <li>Minor typos in displayed text.</li> </ul>"},{"location":"changelog/#030-2023-01-26","title":"[0.3.0] - 2023-01-26","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Ability to limit allowed starting branch.</li> <li>Can be run as a module in addition to the entrypoint script.</li> </ul>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Value of <code>hyper_bump_it.__version__</code>.</li> </ul>"},{"location":"changelog/#internal_3","title":"Internal","text":"<ul> <li>Use <code>hyper-bump-it</code> to manage the version of the project.</li> <li>Automate the release process of new versions.</li> <li>Reorganize internal modules under a single internal sub-module.</li> <li>Remove dependency on <code>semantic-version</code>.</li> </ul>"},{"location":"changelog/#020-2023-01-11","title":"[0.2.0] - 2023-01-11","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Controls related to the interactive confirmation prompt<ul> <li><code>show_confirm_prompt</code> in configuration file can explicitly enable (default) or disable the     prompt.</li> <li><code>-y</code> &amp; <code>--yes</code> as command line options to disable the prompt.</li> <li><code>--interactive</code> as command line options to explicitly enable the prompt.</li> <li><code>-n</code> &amp; <code>--no</code> command line options as aliases for <code>--dry-run</code>.</li> </ul> </li> <li>Command line command to initialize a project.</li> <li>Name of remote repository to displayed description for push action.</li> <li>Support for <code>rich</code> v13.x.</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Crash when executing against a repository without any commits. A clear error message is displayed     instead.</li> <li>Unclear text displayed for proposed execution plan description when compared to text displayed     when executing the plan.</li> </ul>"},{"location":"changelog/#010-2022-12-16","title":"[0.1.0] - 2022-12-16","text":"<p>First functional release</p>"},{"location":"changelog/#001-2022-10-26","title":"[0.0.1] - 2022-10-26","text":"<p>Initial Release (not functional yet)</p>"},{"location":"development-guide/","title":"Development Guide","text":"<p>Welcome! Thanks for wanting to make the project better. This section provides an overview of the project structure and how to work with the code base.</p> <p>Before diving into this, it is best to read:</p> <ul> <li>The whole Usage Guide</li> <li>The Code of Conduct</li> </ul>"},{"location":"development-guide/#how-to-contribute","title":"How to Contribute","text":"<p>There are lots of ways to contribute to the project.</p> <ul> <li>Report a bug</li> <li>Request a new feature</li> <li>Create a pull request that updates the code</li> <li>Create a pull request that updates the documentation</li> <li>Sponsor development of the project      </li> </ul>"},{"location":"development-guide/#creating-a-pull-request","title":"Creating a Pull Request","text":"<p>Before creating a pull request, please first discuss the intended change by creating a new issue or commenting on an existing issue.</p>"},{"location":"development-guide/#code-contributions","title":"Code Contributions","text":"<p>Code contributions should include test for the change. For a bug fix, there should be a new test case that demonstrates the issue that was reported (which the contribution addresses). For a new feature, new test cases should cover the new code, while also and checking for edge cases. Generally, the goal is that each change should increase the code coverage rather than decreasing it. (more details)</p> <p>Pull requests will need to pass all tests and linting checks that are part of the CI pipeline before they can be merged.</p> <p>Significant changes should update the documentation with details about how to use the provided functionality.</p> <p>Changes that affect users of <code>hyper-bump-it</code> must include an entry the CHANGELOG under the <code>[Unrelease]</code> header. Once a new release is ready to be published, a version number will be assigned in place of this header (more details). If a logical change is broken into multiple pull requests, each pull request does not need to add a new entry. For significant changes that affect the development of the project, as apposed to users of <code>hyper-bump-it</code>, the <code>Internal</code> section can be used.</p>"},{"location":"development-guide/#project-environment-management","title":"Project &amp; Environment management","text":"<p>The <code>hyper-bump-it</code> project uses Hatch to manage various aspects of the project's development life cycle. This includes:</p> <ul> <li>building the distributions</li> <li>controlling python environments</li> <li>executing common development tasks</li> </ul> <p><code>requirements-bootstrap.txt</code> can be used to install a version of <code>hatch</code> that is known to work with the project.</p>"},{"location":"development-guide/#dependencies","title":"Dependencies","text":"<ul> <li>Direct Library Dependencies - These are packages imported by the library. They are specified under     <code>project.dependencies</code> in <code>pyproject.toml</code>. These should be version ranges that specify the minimum and maximum     version supported for each dependency. A conservative approach to maximum version is used that disallows the next     major version so that an incompatible version of a direct dependency will not be considered valid. </li> <li>Direct Development Dependencies - These all direct dependencies needed for development. This things like     non-library dependencies imported by tests, linting tools, and documentation tools. They are specified in     <code>pyproject.toml</code> under the specific <code>hatch</code> environment. </li> </ul>"},{"location":"development-guide/#environments","title":"Environments","text":"<p>There are three distinct environments that <code>hatch</code> manages:</p> <ul> <li><code>default</code>:  Testing or linting the project code</li> <li><code>docs</code>: Generating documentation for the project</li> <li><code>bump</code>: Releasing a new version of the library</li> </ul>"},{"location":"development-guide/#docker","title":"Docker","text":"<p>For those that want to work in an even more consistent development environment, there is a Dockerfile that defines an images that is isolated from the host machine. The Docker documentation has details on how to install docker on the computer being used.</p> <p>Once that is configured, it is possible to execute code in the container:</p> <pre><code>docker compose run --rm devbox\n(custom code here)\n</code></pre> <p>The devbox container also utilizes <code>hatch</code> to manage the python environments. So the scripts detailed below can be used from within the container.</p>"},{"location":"development-guide/#testing","title":"Testing","text":"<p>Code contributions won't be merged unless the linting and tests pass. Therefore, it is important to execute that functionality locally before pushing changes. This is so common, that it has a dedicated <code>hatch</code> script.</p> <pre><code>hatch run check\n</code></pre> <p>This will run the same tests, linting, and code coverage that are run by the CI pipeline. The only difference is that, when run locally, <code>black</code> and <code>isort</code> are configured to automatically correct issues they detect.</p> <p>Tip</p> <p>Since this is so common, there is also a shorthand for running this in the container</p> <pre><code>docker compose run --rm check\n</code></pre>"},{"location":"development-guide/#writing-tests","title":"Writing Tests","text":"<p>Generally contributors should endeavor to write tests for every feature. Every new feature branch should increase the test coverage rather than decreasing it.</p> <p>The project uses pytest as the testing framework.</p>"},{"location":"development-guide/#testing-fixtures","title":"Testing Fixtures","text":"<p>In addition to the fixtures provided by <code>pytest</code>, the project also utilizes two plugins that provide fixtures that integrate into <code>pytest</code>.</p> <ul> <li>pytest-mock - Exposes unitest.mock.</li> <li>pytest-freezer - Exposes freezgun (<code>datetime</code> manipulation).</li> </ul>"},{"location":"development-guide/#linting-tools","title":"Linting Tools","text":"<p>To customize one of the linting tools, please read the documentation specific to that tool:</p> <ul> <li>MyPy</li> <li>Black</li> <li>Isort</li> <li>Flake8</li> <li>Bandit</li> </ul>"},{"location":"development-guide/#documentation","title":"Documentation","text":"<p>The project uses mkdocs as static site generator. The mkdocs-material theme is used to control the look and feel of the website. mike is used to manage documentation for each version of <code>hyper-bump-it</code>.</p> <p>The documentation can be built locally. The following command will build the documentation and start a local server to view the rendered documentation.</p> <pre><code>hatch run docs:serve\n</code></pre>"},{"location":"development-guide/#building-the-library","title":"Building the Library","text":"<p><code>hyper-bump-it</code> is PEP 517 compliant. build is used as the frontend tool for building the published distributions of the library. <code>hatching</code> is used as the build backend. The libray metadata is defined in <code>pyproject.toml</code>.</p>"},{"location":"development-guide/#publishing-a-new-version","title":"Publishing a New Version","text":"<p>Once the package is ready to be released, there are a few things that need to be done:</p> <ol> <li>Start with a local clone of the repo on the default branch with a clean working tree.</li> <li> <p>Perform the version bump part name (<code>major</code>, <code>minor</code>, or <code>patch</code>).</p> <p>Example: <code>hatch run bump:it by minor</code></p> <p>This wil create a new branch, updates all affected files with the new version, commit the changes to the branch, and  push the branch.</p> </li> <li> <p>Create a new pull request for the pushed branch.</p> </li> <li>Get the pull request approved.</li> <li>Merge the pull request to the default branch.</li> </ol> <p>Merging the pull request will trigger a GitHub Action that will create a new GitHub release. The creation of this new release will trigger a GitHub Action that will to build a wheel &amp; a source distributions of the package and push them to PyPI.</p> <p>Warning</p> <p>The action that uploads the files to PyPI will not run until a repository maintainer acknowledges that the job is ready to run. This additional layer of manual action ensures that distribution are not unintentionally published. </p> <p>In addition to uploading the files to PyPI, the documentation website will be updated to include the new version. If the new version is a full release, it will be made the new <code>latest</code> version.</p>"},{"location":"development-guide/#continuous-integration-pipeline","title":"Continuous Integration Pipeline","text":"<p>The Continuous Integration (CI) Pipeline runs to confirm that the repository is in a good state. It will run when:</p> <ul> <li>a pull request is created</li> <li>new commits are pushed to the branch for an existing pull request</li> <li>a maintainer merges a pull request to the default branch</li> </ul> <p>Pull requests will need to pass all tests and linting checks that are part of the CI pipeline before they can be merged.</p>"},{"location":"development-guide/#lints","title":"Lints","text":"<p>The first set of jobs that run as part of the CI pipline are linters that perform static analysis on the code (more details).</p>"},{"location":"development-guide/#tests","title":"Tests","text":"<p>The next set of jobs run the unit tests (more details). The pipeline runs the tests cases across each supported version of Python to ensure compatibility.</p> <p>For each run of the test cases, the job will record the test results and code coverage information. The pipeline uploads the code coverage information to CodeCov to ensure that a pull request doesn't significantly reduce the total code coverage percentage or introduce a large amount of code that is untested.</p>"},{"location":"development-guide/#distribution-verification","title":"Distribution Verification","text":"<p>The next set of jobs perform a basic smoke test to ensure that the library can be packaged correctly and used. The sdist and wheel distributions are built and installs in into a virtual environment. Then two checks are performed:</p> <ul> <li>Run Python and import the library version</li> <li>Run <code>hyper-bump-it --help</code></li> </ul> <p>This is done across each supported version of Python to ensure compatibility.</p>"},{"location":"development-guide/#documentation-building","title":"Documentation Building","text":"<p>When running as part of a pull request, the documentation is build in strict mode so that it will fail if there are any errors. The job bundles the generated files into an artifact so that the documentation website can be viewed in its rendered form.</p> <p>When the pipeline is running as a result of a maintainer merging a pull request to the default branch, a job runs that publishes the current state of the documentation to as the <code>dev</code> version. This will allow users to view the \"in development\" state of the documentation with any changed that have been made since a maintainer published the <code>latest</code> version.</p>"},{"location":"development-guide/#renovate-configuration-lint","title":"Renovate Configuration Lint","text":"<p>Renovate is used to automate the process of keeping project dependencies up to date. A small job that confirms that the configuration is valid.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>To install <code>hyper-bump-it</code>, simply run this simple command in your terminal of choice:</p> <pre><code>python -m pip install hyper-bump-it\n</code></pre>"},{"location":"getting-started/#initial-setup","title":"Initial Setup","text":"<p>Before <code>hyper-bump-it</code> can do any work, it needs to be configured. This configuration allows it to know which files should be operated on and how. A simple config file named <code>hyper-bump-it.toml</code> can be seen below:</p> <pre><code>[hyper-bump-it]\ncurrent_version = \"1.2.3\"\n\n[[hyper-bump-it.files]]\nfile_glob = \"version.txt\"\nsearch_format_pattern = \"version=\\\"{version}\\\"\"\n</code></pre> <ul> <li>Line 2: Specifies the current version of the project being configured. Edit this value to match     the version for the latest release of the project.</li> <li>Line 4-6: Define a single file definition.</li> <li>Line 5: Specifies the name of a file to be updated.</li> <li>Line 6: Specifies the text to look for in that file and replace with the new version.</li> </ul>"},{"location":"getting-started/#automated-initialization","title":"Automated Initialization","text":"<p>To help users start using <code>hyper-bump-it</code> for the first time, the <code>init</code> command is provided to help initialize the configuration file. The default mode of operation for this command is to show a series of interactive prompts that will allow for fully customizing the configuration. The following shows an example that changes format pattern used to create the commit message.</p> hyper-bump-it.tomlpyproject.toml <pre><code>$ hyper-bump-it init 1.2.3\nWhat part of configuration would you like to edit?\ngeneral - Top level settings that don't fit in a specific category\nfiles - File matching settings\ngit - Git integration settings\ndone - Stop editing and write out the configuration (default)\nEnter the option name: git\nWhat part of configuration would you like to edit?\nremote - Name of remote to use when pushing changes\ncommit - Format pattern to use for commit message\nbranch - Format pattern to use for branch name\ntag - Format pattern to use for tag name\nactions - Configure what Git actions should be performed\ndone - Stop editing the Git integration settings (default)\nEnter the option name: commit\nFormat patterns are used to generate text. The format pattern for commit message is currently set to: Bump version: {current_version} \u2192 {new_version} (the default)\nEnter a new format pattern or leave it blank to keep the value: Bump to version: {current_version}\nWhat part of configuration would you like to edit?\nremote - Name of remote to use when pushing changes\ncommit - Format pattern to use for commit message\nbranch - Format pattern to use for branch name\ntag - Format pattern to use for tag name\nactions - Configure what Git actions should be performed\ndone - Stop editing the Git integration settings (default)\nEnter the option name: done\nWhat part of configuration would you like to edit?\ngeneral - Top level settings that don't fit in a specific category\nfiles - File matching settings\ngit - Git integration settings\ndone - Stop editing and write out the configuration (default)\nEnter the option name: done\n\n$ cat hyper-bump-it.toml \n[hyper-bump-it]\ncurrent_version = \"1.2.3\"\n[[hyper-bump-it.files]]\nfile_glob = \"version.txt\"\n\n[hyper-bump-it.git]\ncommit_format_pattern = \"Bump to version: {current_version}\"\n</code></pre> <pre><code>$ hyper-bump-it init --pyproject 1.2.3\nWhat part of configuration would you like to edit?\ngeneral - Top level settings that don't fit in a specific category\nfiles - File matching settings\ngit - Git integration settings\ndone - Stop editing and write out the configuration (default)\nEnter the option name: git\nWhat part of configuration would you like to edit?\nremote - Name of remote to use when pushing changes\ncommit - Format pattern to use for commit message\nbranch - Format pattern to use for branch name\ntag - Format pattern to use for tag name\nactions - Configure what Git actions should be performed\ndone - Stop editing the Git integration settings (default)\nEnter the option name: commit\nFormat patterns are used to generate text. The format pattern for commit message is currently set to: Bump version: {current_version} \u2192 {new_version} (the default)\nEnter a new format pattern or leave it blank to keep the value: Bump to version: {current_version}\nWhat part of configuration would you like to edit?\nremote - Name of remote to use when pushing changes\ncommit - Format pattern to use for commit message\nbranch - Format pattern to use for branch name\ntag - Format pattern to use for tag name\nactions - Configure what Git actions should be performed\ndone - Stop editing the Git integration settings (default)\nEnter the option name: done\nWhat part of configuration would you like to edit?\ngeneral - Top level settings that don't fit in a specific category\nfiles - File matching settings\ngit - Git integration settings\ndone - Stop editing and write out the configuration (default)\nEnter the option name: done\n\n$ cat pyproject.toml\n[tool.other]\nfoo = \"hello world\"\n[tool.hyper-bump-it]\ncurrent_version = \"1.2.3\"\n[[tool.hyper-bump-it.files]]\nfile_glob = \"version.txt\"\n\n[tool.hyper-bump-it.git]\ncommit_format_pattern = \"Bump to version: {current_version}\"\n</code></pre> <p>There is an alternate mode accessed by providing the <code>--non-interactive</code> option. This will write out the configuration based only on values specified with command line options. The following shows the most basic form of this mode.</p> hyper-bump-it.tomlpyproject.toml <pre><code>$ hyper-bump-it init --non-interactive 1.2.3\nNon-interactive mode: A sample configuration will be written that will need manual edits.\n$ cat hyper-bump-it.toml\n[hyper-bump-it]\ncurrent_version = \"1.2.3\"\n[[hyper-bump-it.files]]\nfile_glob = \"version.txt\"\n</code></pre> <pre><code>$ hyper-bump-it init --non-interactive --pyproject 1.2.3\nNon-interactive mode: A sample configuration will be written that will need manual edits.\n$ cat pyproject.toml\n[tool.other]\nfoo = \"hello world\"\n[tool.hyper-bump-it]\ncurrent_version = \"1.2.3\"\n[[tool.hyper-bump-it.files]]\nfile_glob = \"version.txt\"\n</code></pre> <p>There are many more options that can be used to further customize the configuration, when using this mode. <code>hyper-bump-it init --help</code> will show the options not covered here.</p> <p>Tip</p> <p>See the configuration page for how to utilize <code>pyproject.toml</code> instead of a dedicated configuration file.</p>"},{"location":"getting-started/#example-executions","title":"Example Executions","text":"<p>Using the configuration shown above, lets see how <code>hyper-bump-it</code> runs.</p> <pre><code>$ hyper-bump-it to 2.3.4\nExecution Plan:\nUpdate version in configuration file\nUpdate files\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 version.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n--- version.txt\n+++ version.txt\n@@ -1,3 +1,3 @@\n hello\n-version=\"1.2.3\"\n+version=\"2.3.4\"\n world\n\nCommit changes: Bump version: 1.2.3 \u2192 2.3.4\n\nDo you want to perform these actions? [y/n] (n): y\nUpdating version in configuration file\nUpdating files\nUpdating version.txt\nCommitting changes: Bump version: 1.2.3 \u2192 2.3.4\n</code></pre> <p><code>hyper-bump-it</code> finds the file with the version text and displays the changes it plans to make. After the user confirms the change, the program continues with editing the files.</p> <p>Included in the execution plan is committing the changes to the local <code>git</code> checkout. The example configuration file did not specify any specific options, so <code>hyper-bump-it</code> defaulted to simply committing the changes.</p> <p>In addition to updating the version to a specific value, <code>hyper-bump-it</code> can also do version increments. The following example show <code>hyper-bump-it</code> updating the version, from the original state, to the next minor version.</p> <pre><code>$ hyper-bump-it by minor\nUpdating version in configuration file\nUpdate files\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 version.txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n--- version.txt\n+++ version.txt\n@@ -1,3 +1,3 @@\n hello\n-version=\"1.2.3\"\n+version=\"1.3.0\"\n world\n\nCommit changes: Bump version: 1.3.0 \u2192 1.4.0\n\nDo you want to perform these actions? [y/n] (n): y\nUpdating version in configuration file\nUpdate files\nUpdating version.txt\nCommitting changes: Bump version: 1.3.0 \u2192 .1.4.0\n</code></pre>"},{"location":"getting-started/#whats-next","title":"What's Next?","text":"<p>Read about all the configuration options for a more detailed description of how to get <code>hyper-bump-it</code> to work best for a specific project.</p> <p>Read about how <code>hyper-bump-it</code> can integrate with <code>git</code> to learn more about how to automate things like creating a branch, pushing a change, and creating a tag.</p> <p>Read about how format patterns can be used to customize how text is matched and updated.</p>"},{"location":"why-hyper-bump-it/","title":"Why hyper-bump-it?","text":"<p>There are multiple other version bumping tools available. Before creating <code>hyper-bump-it</code>, I had used bump2version and tbump. However, each time I would end up writing a script to wrap the tool to get the full functionality I desired.</p> <p>This page covers some of the more significant differences between <code>hyper-bump-it</code>, <code>bump2version</code>, and <code>tbump</code><sup>1</sup>. This includes some things that are not supported by <code>hyper-bump-it</code><sup>2</sup>.</p>"},{"location":"why-hyper-bump-it/#key-differences","title":"Key Differences","text":""},{"location":"why-hyper-bump-it/#branch-version-control-support","title":"Branch Version Control Support","text":"<p>Both <code>bump2version</code> and <code>tbump</code> support committing and tagging the change in the local repository. However, it is common to not allow pushing directly to the default branch of a repository.</p> <p><code>hyper-bump-it</code> can be used to create a branch for the commit that updates the version. This branch can then be push and merged as part of a pull request.</p>"},{"location":"why-hyper-bump-it/#push-version-control-support","title":"Push Version Control Support","text":"<p><code>bump2version</code> can only make changes to the local repository. <code>tbump</code> can push changes to the remote repository (and will do that by default).</p> <p><code>hyper-bump-it</code> can push changes to the remote repository, but will only do that when configured to do so.</p>"},{"location":"why-hyper-bump-it/#current-version-from-file","title":"Current Version from File","text":"<p>Most software build/release tools already have an authoritative place for the version to be stored. <code>hyper-bump-it</code> can be configured to extract the current version for that file (see Current Version). This has the added benefit of the configuration file not being edited every time version is updated.</p> <p>This functionality is optional. Explicitly listing the current version in the configuration file is supported in the same way as done in <code>bump2version</code> and <code>tbump</code>.</p>"},{"location":"why-hyper-bump-it/#toml-configuration-file","title":"TOML Configuration File","text":"<p><code>bump2version</code> uses an INI configuration file. However, that file format does not have a standard specification and different implementation have varying support for some features.</p> <p><code>hyper-bump-it</code> and <code>tbump</code> use a TOML configuration files. The specification of this file format ensures that there are no ambiguities. It is straight forward for people to read and programs to parse. The requirement for quoting strings resolves potential issues that can arise when dealing with multi-line string and/or strings that contain comment characters.</p>"},{"location":"why-hyper-bump-it/#multiline-search-replacement-patterns","title":"Multiline Search &amp; Replacement Patterns","text":"<p><code>hyper-bump-it</code> and <code>bump2version</code> support search or replacement patterns that span multiple lines. This can be helpful for dealing with ambiguities in a file that needs to be updated or adding multiple lines of text as part of the update.</p> <p><code>tbump</code> does not have support for this feature.</p>"},{"location":"why-hyper-bump-it/#date-support","title":"Date Support","text":"<p><code>hyper-bump-it</code> and <code>bump2version</code> support including date information in the search and replacement text. However, <code>bump2version</code> will always use the current date when looking in a file for a match. This means <code>bump2version</code> is not able to update text containing an older date. In contrast, when <code>hyper-bump-it</code> can match on arbitrary dates as part of the search text.</p> <p><code>tbump</code> does not have support for this feature.</p>"},{"location":"why-hyper-bump-it/#mercurial-support","title":"Mercurial Support","text":"<p><code>bump2version</code> can work with projects that use Mercurial or Git.</p> <p><code>hyper-bump-it</code> and <code>tbump</code> only support Git.</p>"},{"location":"why-hyper-bump-it/#custom-version-schemes","title":"Custom Version Schemes","text":"<p><code>hyper-bump-it</code> assumes that the full version is compatible with the semantic versioning specification.</p> <p><code>bump2version</code> and <code>tbump</code> allow for fully customized version. However, this doesn't mean that every file must contain the full version (see Format Patterns).</p>"},{"location":"why-hyper-bump-it/#table-of-differences","title":"Table of Differences","text":"Feature hyper-bump-it bump2version tbump VCS Branching Yes No No VCS Push Yes (opt-in) No Yes (opt-out) Current Version from File Yes No No Configuration File Format TOML INI TOML Multiline Search &amp; Replace Yes Yes No Date Support Yes Partial (exact match) No Git Yes Yes Yes Mercurial No Yes No Custom Version Schemes No Yes Yes <ol> <li> <p>As of the writing of this page (2023-02-20).\u00a0\u21a9</p> </li> <li> <p>Support for these feature could be added in the future.\u00a0\u21a9</p> </li> </ol>"},{"location":"usage-guide/configuration/","title":"Configuration","text":"<p><code>hyper-bump-it</code> is configured using a file in the TOML format. The default name for this file is <code>hyper-bump-it.toml</code> and it is expected to be in the root directory of the project. The command line interface (CLI) allows specifying an alternate path for this file.</p> <p>pyproject.toml Support</p> <p>For Python projects, <code>pyproject.toml</code> is a standard file that can contain configuration information for multiple different tools. <code>hyper-bump-it</code> also supports reading the configuration from this file. This will only be checked for if <code>hyper-bump-it.toml</code> is not found and the CLI did not specify an alternate path.</p>"},{"location":"usage-guide/configuration/#configuration-file","title":"Configuration File","text":"<p>All configuration sections are rooted under the <code>hyper-bump-it</code> table. Most settings have reasonable defaults, so the following is a functional configuration.</p> <p>pyproject.toml Support</p> <p>When using <code>pyproject.toml</code>, configuration sections are rooted under the <code>tool.hyper-bump-it</code> table instead of simply <code>hyper-bump-it</code>.</p> hyper-bump-it.tomlpyproject.toml <pre><code>[hyper-bump-it]\ncurrent_version = \"1.2.3\"\n\n[[hyper-bump-it.files]]\nfile_glob = \"*.txt\"\n</code></pre> <pre><code>[tool.hyper-bump-it]\ncurrent_version = \"1.2.3\"\n\n[[tool.hyper-bump-it.files]]\nfile_glob = \"*.txt\"\n</code></pre>"},{"location":"usage-guide/configuration/#top-level-table","title":"Top Level Table","text":"<p>There are a few fields that can be specified as part of the top level table.</p> <p>The most common is the <code>current_version</code> field, which contains the current version. How this is used and the alternative option are discussed in a latter section.</p> <p>The other optional field is <code>show_confirm_prompt</code>. If this field is not specified (default) or set to <code>true</code>, <code>hyper-bump-it</code> will prompt the user to confirm the changes described in the execution plan before performing the actions. When set to <code>false</code>, the prompt will not be displayed. Instead, the actions will be immediately performed.</p> <p>The following is an example configuration which disables the confirmation prompt.</p> hyper-bump-it.tomlpyproject.toml <pre><code>[hyper-bump-it]\ncurrent_version = \"1.2.3\"\nshow_confirm_prompt = false\n\n[[hyper-bump-it.files]]\nfile_glob = \"*.txt\"\n</code></pre> <pre><code>[tool.hyper-bump-it]\ncurrent_version = \"1.2.3\"\nshow_confirm_prompt = false\n\n[[tool.hyper-bump-it.files]]\nfile_glob = \"*.txt\"\n</code></pre>"},{"location":"usage-guide/configuration/#files","title":"Files","text":"<p>The most important part of the configuration is the list of file definitions. This is how <code>hyper-bump-it</code> knows which files should be updated and how that update process should operate. There must be at least one file definition.</p> <p>The only field that each file definition is required to have is that <code>file_glob</code> field. This tells <code>hyper-bump-it</code> which files should be updated. This can be an explicit file name, but glob patterns are also supported. Using a glob pattern allows for a single file definition to be used to specify how multiple files should be updated. These file paths should be relative to the project root.</p> <p>In addition, <code>search_format_pattern</code> and <code>replace_format_pattern</code> fields can be included in a file definition. The <code>search_format_pattern</code> specifies the text to look for in each file matched by <code>file_glob</code>. While the <code>replace_format_pattern</code> specifies the text to write back to the file in place of the text that was searched for. There is a dedicated page that discusses format patterns in more detail.</p> <p>If <code>search_format_pattern</code> is not specified, the default value of <code>\"{version}\"</code> is used. If <code>replace_format_pattern</code> is not specified, the value of <code>search_format_pattern</code> is used.</p> <p>There is an additional optional field named <code>keystone</code>, this is discussed in a latter section.</p> <p>The following is an example configuration which has two file definitions that both customize the <code>search_format_pattern</code>.</p> hyper-bump-it.tomlpyproject.toml <pre><code>[hyper-bump-it]\ncurrent_version = \"1.2.3\"\n\n[[hyper-bump-it.files]]\nfile_glob = \"*.txt\"\nsearch_format_pattern = \"version={version}\"\n\n[[hyper-bump-it.files]]\nfile_glob = \"index.md\"\nsearch_format_pattern = \"My Project - {major}.{minor}\"\n</code></pre> <pre><code>[tool.hyper-bump-it]\ncurrent_version = \"1.2.3\"\n\n[[tool.hyper-bump-it.files]]\nfile_glob = \"*.txt\"\nsearch_format_pattern = \"version={version}\"\n\n[[tool.hyper-bump-it.files]]\nfile_glob = \"index.md\"\nsearch_format_pattern = \"My Project - {major}.{minor}\"\n</code></pre>"},{"location":"usage-guide/configuration/#git","title":"Git","text":"<p>The <code>git</code> integration is configured within the dedicated sub-tables, but they are completely optional.</p>"},{"location":"usage-guide/configuration/#actions","title":"Actions","text":"<p>There are three types of <code>git</code> actions that can be performed: <code>commit</code>, <code>branch</code>, and <code>tag</code>. Each of these fields can have one of three values: <code>\"skip\"</code>, <code>\"create\"</code>, or <code>\"create-and-push\"</code>. There is a dedicated section that discusses these git actions in more detail.</p> <p>To ensure changes are not accidentally published, none of the fields default to <code>\"create-and-push\"</code>. If <code>commit</code> is not specified, the default value of <code>\"create\"</code> is used. If <code>brnach</code> is not specified, the default value of <code>\"skip\"</code> is used. If <code>tag</code> is not specified, the default value of <code>\"skip\"</code> is used.</p>"},{"location":"usage-guide/configuration/#allowed-initial-branches","title":"Allowed Initial Branches","text":"<p>Further safety concerns can be addressed by limiting which branches <code>hypber-bump-it</code> will execute on. By default, only <code>main</code> and <code>master</code> are allowed. <code>allowed_initial_branches</code>can be used to customize the set of allowed branches. Explicitly using an empty list will disable this functionality. If you want to allow additional branches in addition to the defaults, <code>extend_allowed_initial_branches</code> can be used without needing to explicitly re-list the defaults.</p>"},{"location":"usage-guide/configuration/#customize-operations","title":"Customize Operations","text":"<p>There are a few fields that can be used to customize how these actions operate.</p> <ul> <li><code>remote</code> specifies the name of remote repository to use as the destination for push operations.     If not specified, the default value of <code>\"origin\"</code> is used.</li> <li><code>commit_format_pattern</code> is a format pattern used to produce the message for     the commit. If not specified, the default value of     <code>\"Bump version: {current_version} \u2192 {new_version}\"</code> is used.</li> <li><code>branch_format_pattern</code> is a format pattern used to produce the name of the     branch. If not specified, the default value of, the default value of     <code>\"bump_version_to_{new_version}\"</code> is used.</li> <li><code>tag_name_format_pattern</code> is a format pattern used to produce the name of the     tag. If not specified, the default value of, the default value of <code>\"v{new_version}\"</code> is used.</li> <li><code>tag_message_format_pattern</code> is a format pattern used to produce the message     of the tag. If not specified, the default value of, the default value of     <code>\"Bump version: {current_version} \u2192 {new_version}\"</code> is used.</li> </ul>"},{"location":"usage-guide/configuration/#example","title":"Example","text":"<p>The following is an example configuration which creates a commit on a new branch that is pushed to the \"upstream\" remote. Additionally, the format patterns for the commit message and branch names are customized.</p> hyper-bump-it.tomlpyproject.toml <pre><code>[hyper-bump-it]\ncurrent_version = \"1.2.3\"\n\n[hyper-bump-it.git]\nremote = \"upstream\"\ncommit_format_pattern = \"Bump version to {new_version}\"\nbranch_format_pattern = \"bump_to_{new_version}\"\n\n[hyper-bump-it.git.actions]\ncommit = \"create-and-push\"\nbranch = \"create-and-push\"\n\n[[hyper-bump-it.files]]\nfile_glob = \"*.txt\"\n</code></pre> <pre><code>[tool.hyper-bump-it]\ncurrent_version = \"1.2.3\"\n\n[tool.hyper-bump-it.git]\nremote = \"upstream\"\ncommit_format_pattern = \"Bump version to {new_version}\"\nbranch_format_pattern = \"bump_to_{new_version}\"\n\n[tool.hyper-bump-it.git.actions]\ncommit = \"create-and-push\"\nbranch = \"create-and-push\"\n\n[[tool.hyper-bump-it.files]]\nfile_glob = \"*.txt\"\n</code></pre>"},{"location":"usage-guide/configuration/#current-version","title":"Current Version","text":"<p>By default, the current version is explicitly recorded in the configuration file using the <code>current_version</code> field. As a result, this means that each time <code>hyper-bump-it</code> is used to change the version number, that configuration file will also change.</p> <p>For some, this behavior might not be desirable. Most projects already have a that acts as the authoritative source for the software version when the release artifact is generated. <code>hyper-bump-it</code> allows projects to indicate this file with the <code>keystone</code> setting as part of a file table.</p> <p>The following is an example configuration has a single file definitions, which is a keystone file. Default values are used for all other fields.</p> hyper-bump-it.tomlpyproject.toml <pre><code>[[hyper-bump-it.files]]\nfile_glob = \"version.txt\"\nkeystone = true\n</code></pre> <pre><code>[[tool.hyper-bump-it.files]]\nfile_glob = \"version.txt\"\nkeystone = true\n</code></pre> <p>Note</p> <p>Since <code>current_version</code> is not used when using a keystone file, the top level table can be  omitted.</p> <p>The <code>search_format_pattern</code> will be used to parse the specified file to discover the current version.</p> <p>With this functionality enabled, there are a few restrictions:</p> <ul> <li>The configuration file must not specify the <code>current_version</code> field.</li> <li>Specifying a glob pattern instead of an explicit file name for <code>file_glob</code> is still supported.     However, it must only match a single file.</li> <li>The <code>search_format_pattern</code> can contain any of the supported keys. However,     it is important to understand how the pattern is processed.</li> </ul>"},{"location":"usage-guide/format-patterns/","title":"Format Patterns","text":"<p>A format pattern is a string provided to <code>hyper-bump-it</code> that goes through a text formatting process before it is used. This is done using Python's format string syntax. While the link covers the full syntax, the key point is that values are referenced by enclosing  the name in curly braces (positional references are not supported). Text outside the curly braces will be left unaltered. If you need to include a brace character in the text, it can be escaped by doubling the brace character (<code>{{</code> or <code>}}</code>). As a basic example, if the current version is <code>1.2.3</code> and the new version is <code>4.5.6</code></p> <pre><code>\"From {current_version} to {new_major}.{new_minor} {{new_major}}\"\n</code></pre> <p>would become</p> <pre><code>\"From 1.2.3 to 4.5 {new_major}\"\n</code></pre>"},{"location":"usage-guide/format-patterns/#supported-keys","title":"Supported Keys","text":""},{"location":"usage-guide/format-patterns/#version-keys","title":"Version Keys","text":"Name Description Type current_version Full current version <code>Version</code><sup>1</sup> current_major Major part of current version <code>int</code> current_minor Minor part of current version <code>int</code> current_patch Patch part of current version <code>int</code> current_prerelease Pre-release part of current version <sup>2</sup> <code>str</code> current_build Build part of current version <sup>2</sup> <code>str</code> new_version Full new version <code>Version</code> <sup>1</sup> new_major Major part of new version <code>int</code> new_minor Minor part of new version <code>int</code> new_patch Patch part of new version <code>int</code> new_prerelease Pre-release part of new version <sup>2</sup> <code>str</code> new_build Build part of new version <sup>2</sup> <code>str</code>"},{"location":"usage-guide/format-patterns/#general-context-keys","title":"General Context Keys","text":"<p>When a format pattern is being used as a search or replacement pattern, there are an additional set of keys that may be used. Depending on the context, each key acts as an alias for one of the keys listed above.</p> Name Alias For (Search) Alias For (Replace) version current_version new_version major current_major new_major minor current_minor new_minor patch current_patch new_patch prerelease current_prerelease new_prerelease build current_build new_build <p>As a basic example, if the current version is <code>1.2.3</code> and the new version is <code>4.5.6</code> and the format pattern is <code>\"version='{version}'\"</code>.</p> <p>When used as a search pattern it would become</p> <pre><code>\"version='1.2.3'\"\n</code></pre> <p>But when used as a replacement pattern it would become</p> <pre><code>\"version='4.5.6'\"\n</code></pre> <p>It is very common that the only differences between the search and replacement format patterns is which version value they are referencing. These general context keys can be used for these cases to reduce duplication in the configuration. (See File Configuration)</p>"},{"location":"usage-guide/format-patterns/#helper-keys","title":"Helper Keys","text":"<p>So far, all the supported keys have been directly related to the version information for a specific execution. However, <code>hyper-bump-it</code> is not limited to those type of values. The following are also supported.</p> Name Description Type today Current date <code>datetime.date</code><sup>3</sup>"},{"location":"usage-guide/format-patterns/#today-in-search-patterns","title":"Today in Search Patterns","text":"<p>The <code>today</code> key operates differently from all other keys when used in a search format pattern. Instead of strictly matching the value of the current date, it will match any date. This is allows for updating a line of text that contains a date to be the current date. A search format pattern of <code>today = {today}</code> would match <code>today = 2023-02-24</code>, <code>today = 0000-01-01</code> and <code>today = 9999-12-31</code>.</p> <p>Locale-independent format specifications codes are supported. A search format pattern of <code>{today:%m/%d/%Y}.</code> matches <code>02/24/2023</code>.</p>"},{"location":"usage-guide/format-patterns/#keystone-file-considerations","title":"Keystone File Considerations","text":"<p>When utilizing the keystone file functionality, <code>hyper-bump-it</code> converts the search format pattern into a regular expression that can be used to parse the current version from the file.</p>"},{"location":"usage-guide/format-patterns/#key-precedence","title":"Key Precedence","text":"<p>General context keys take precedence over the explicit version keys. As an example, if the search format string was <code>\"{version} - {current_version}\"</code>, only <code>version</code> would be used.</p> <p>If the search format string contains <code>version</code> or <code>current_version</code>, no other keys will be used.</p>"},{"location":"usage-guide/format-patterns/#limitations","title":"Limitations","text":"<p>This conversion process imposes limitations on the search format pattern that can be used for a keystone file. The most basic limitation is that if the search format pattern does not contain <code>version</code> or <code>current_version</code>, the format pattern must contain keys to capture the major, minor and patch part of the version.</p> <p>Before getting into the specifics, format patterns that only use basic name only references (as demonstrated earlier on this page) are fully supported.</p> <ul> <li>Attribute access and element indexes are not supported.</li> <li>Conversion flags are ignored.</li> <li>Format specifications are only supported for <code>today</code>. Furthermore, the only     supported specifications are the date specific format code. Within that     set, codes that are dependent on the machine's locale are not supported.</li> </ul> <ol> <li> <p><code>Version</code> is equivalent to <pre><code>@dataclass\nclass Version:\n    major: int\n    minor: int\n    patch: int\n    prerelease: tuple[str, ...]\n    build: tuple[str, ...]\n</code></pre> \u21a9\u21a9</p> </li> <li> <p>A period delimited string of each part of the value. If the version does not contain this value, the result will be an empty string.\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>The date type supports defaults to the form of <code>YYYY-MM-DD</code>. This can be customized using formatting codes.\u00a0\u21a9</p> </li> </ol>"},{"location":"usage-guide/git-integration/","title":"Git Integration","text":"<p>In addition to updating a specified set of files, <code>hyper-bump-it</code> can interact with the projects version control system. This functionality will automate some of the action that would need to be performed manually after updating files.</p>"},{"location":"usage-guide/git-integration/#requirements","title":"Requirements","text":"<p><code>hyper-bump-it</code> depends on the <code>git</code> executable to be installed and available on the system path. (GitPython is used under the covers to interact with <code>git</code>).</p> <p>The local checkout of the project is expected to have the <code>.git/</code> directory at the same level as the project root.</p> <p>Tip</p> <p>These requirements are only enforced when <code>hyper-bump-it</code> is configured to perform <code>git</code> actions. When all of the actions are set to <code>\"skip\"</code>, the <code>git</code> funcitonality will not be initialized.</p>"},{"location":"usage-guide/git-integration/#actions","title":"Actions","text":"<p>There are three types of <code>git</code> actions that can be performed: commit, branch, and tag.</p> <ul> <li>The commit action is the most basic. It is the process of creating a new commit that contains the     files that were updated by <code>hyper-bump-it</code>.</li> <li>The branch action can be used to augment the commit action. When used, a new branch is created      and the new commit is added to that new branch instead of the branch that was active when     <code>hyper-bump-it</code> started executing.</li> <li>The tag action can be used to as a step following the commit action. When used, it creates a new     tag that points to the new commit.</li> </ul>"},{"location":"usage-guide/git-integration/#valid-action-states","title":"Valid action states","text":"<p>Each of the git operations can be configured to be <code>\"skip\"</code>, <code>\"create\"</code>, or <code>\"create-ane-push\"</code>. However, many of the combinations that are possible are not allowed because they would require a result that is not possible.</p> <p>There are a few basic rules:</p> <ul> <li>If the files are being edited without creating a commit (commit action is set to <code>\"skip\"</code>), branch     and tag must also be set to <code>\"skip\"</code>.</li> <li>If a commit is being created, but not pushed (commit action is set to <code>\"create\"</code>), branch and tag     must not be set to <code>\"create-and-push\"</code>.</li> <li>If a commit is being created &amp; pushed (commit action is set to <code>\"create-and-push\"</code>), branch     must not be  set to <code>\"create\"</code>.</li> </ul>"},{"location":"usage-guide/git-integration/#allowed-initial-branches","title":"Allowed Initial Branches","text":"<p>Accidentally performing a version bump from a feature branch could result in code being released that was not ready for the public. To help prevent this from occurring, <code>hyper-bump-it</code> checks the current branch at startup to check that it is an allowed branch. By default, <code>main</code> and <code>master</code> are the only allowed initial branches. Additional branches can be added with <code>extend_allowed_initial_branches</code>. This functionality can be disabled by setting <code>allowed-initial-branches</code> to an empty list.</p>"},{"location":"usage-guide/git-integration/#commit-tag-signing","title":"Commit &amp; Tag Signing","text":"<p>For users that want to sign commits or tags, this is supported out of the box. Commits created by <code>hyper-bump-it</code> will be signed if <code>commit.gpgsign</code> is set to <code>true</code>. Tags created by <code>hyper-bump-it</code> will be signed if <code>tag.gpgsign</code> is set to <code>true</code>.</p>"}]}